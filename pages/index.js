import React, { useState } from "react";
import Head from "next/head";
import { Form, Button, Select, DatePicker, Spin } from "antd";
import "antd/dist/antd.css";
import Sidebar from "../components/Sidebar";
import AnyChart from "anychart-react";
import anychart from "anychart";
import axios from "axios";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [isChart, setIsChart] = useState(false);

  const { Option } = Select;
  const { RangePicker } = DatePicker;
  function onChange(value) {
    console.log(`selected ${value}`);
  }

  function onSearch(val) {
    console.log("search:", val);
  }
  const onFinish = (values) => {
    setLoading(true);
    const formData = {
      currency: values.currencies,
      dataset: values.dataset,
      model: values.model,
      timeframe: values.timeframe,
      to: "",
      from: "",
    };
    //return false;
    axios({
      method: "post",
      headers: { "Content-Type": "application/json" },
      url: `${process.env.API_URL}dataset`,
      data: formData,
    })
      .then((res) => {
        const currencyKeyArray = Object.keys(res.data.data);
        const currencyKey = currencyKeyArray[0];
        var result = res.data.data[currencyKey];

        // ============= Chart Configuration ==========
        var dataTable = anychart.data.table();
        // ============= Chart Configuration ==========

        for (let i = 0; i < result.length - 1; i++) {
          let data = result[i];
          var candleData = [
            data["datetime"],
            data["ADX"],
            data["ADX_LABEL"],
            data["ATR"],
            data["BBANDS_LOWER"],
            data["BBANDS_MIDDLE"],
            data["BBANDS_UPPER"],
            data["CANDLE_LABEL"],
            data["CLOSE"],
            data["COUNT"],
            data["HAMMER"],
            data["HIGH"],
            data["INVERTED_HAMMER"],
            data["LABEL"],
            data["LOW"],
            data["MA_FAST"],
            data["MA_SLOW"],
            data["MINUS_DI"],
            data["OPEN"],
            data["PLUS_DI"],
            data["RSI"],
            data["RSI_LABEL"],
            data["STOCH_SLOWD"],
            data["STOCH_SLOWK"],
          ];
          //  console.log("candledata", candleData);
          dataTable.addData([candleData]);
        }
        var mapping = dataTable.mapAs();
        mapping.addField("ADX", 1, "ADX");
        mapping.addField("ADX_LABEL", 2, "ADX_LABEL");
        mapping.addField("ATR", 3, "ATR");
        mapping.addField("BBANDS_LOWER", 4, "BBANDS_LOWER");
        mapping.addField("BBANDS_MIDDLE", 5, "BBANDS_MIDDLE");
        mapping.addField("BBANDS_UPPER", 6, "BBANDS_UPPER");
        mapping.addField("CANDLE_LABEL", 7, "CANDLE_LABEL");
        mapping.addField("close", 8, "close");
        mapping.addField("COUNT", 9, "COUNT");
        mapping.addField("HAMMER", 10, "HAMMER");
        mapping.addField("high", 11, "high");
        mapping.addField("INVERTED_HAMMER", 12, "INVERTED_HAMMER");
        mapping.addField("LABEL", 13, "LABEL");
        mapping.addField("low", 14, "low");
        mapping.addField("MA_FAST", 15, "MA_FAST");
        mapping.addField("MA_SLOW", 16, "MA_SLOW");
        mapping.addField("MINUS_DI", 17, "MINUS_DI");
        mapping.addField("open", 18, "open");
        mapping.addField("PLUS_DI", 19, "PLUS_DI");
        mapping.addField("RSI", 20, "RSI");
        mapping.addField("RSI_LABEL", 21, "RSI_LABEL");
        mapping.addField("STOCH_SLOWD", 22, "STOCH_SLOWD");
        mapping.addField("STOCH_SLOWK", 23, "STOCH_SLOWK");
        var chart = anychart.stock();
        var plot = chart.plot(0);
        plot.candlestick(mapping).name("Candles");
        plot.yGrid(true).xGrid(true).yMinorGrid(true).xMinorGrid(true);
        //chart.container("container");
        //if (!chart.container()) chart.container("container");
        // chart.draw();

        plot.area(mapping).name("Candles");
        setIsChart(true);
        var rangePicker = anychart.ui.rangePicker();
        rangePicker.render(chart);
        var rangeSelector = anychart.ui.rangeSelector();
        rangeSelector.render(chart);
        setLoading(false);
      })
      .catch(function (error) {
        console.log(error);
        setLoading(false);
      });
  };
  //========= Chart=======

  return (
    <div>
      <Head>
        <title>Luccrostrength</title>
        <meta name="Luccrostrength" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="dashboard">
        <Sidebar />
        <div className="main-content">
          <div className="white-box">
            <Form
              name="horizontal_login"
              layout="inline"
              initialValues={{
                currencies: "GBP_JPY",
                dataset: "train",
                model: "CNN_NEW_TDC",
                timeframe: "M240",
              }}
              onFinish={onFinish}
            >
              <Form.Item label="Currencies" name="currencies">
                <Select
                  showSearch
                  placeholder="Select"
                  optionFilterProp="children"
                  onChange={onChange}
                  onSearch={onSearch}
                  filterOption={(input, option) =>
                    option.children
                      .toLowerCase()
                      .indexOf(input.toLowerCase()) >= 0
                  }
                  style={{ width: "120px" }}
                >
                  <Option value="GBP_JPY">GBP_JPY</Option>
                  <Option value="EUR_USD">EUR_USD</Option>
                  <Option value="NZD_USD">NZD_USD</Option>
                  <Option value="USD_CHF">USD_CHF</Option>
                  <Option value="AUD_CHF">AUD_CHF</Option>
                  <Option value="CAD_CHF">CAD_CHF</Option>
                  <Option value="AUD_NZD">AUD_NZD</Option>
                  <Option value="NZD_CHF">NZD_CHF</Option>
                  <Option value="CHF_JPY">CHF_JPY</Option>
                  <Option value="NZD_CAD">NZD_CAD</Option>
                  <Option value="NZD_JPY">NZD_JPY</Option>
                  <Option value="GBP_CAD">GBP_CAD</Option>
                  <Option value="EUR_CAD">EUR_CAD</Option>
                  <Option value="EUR_GBP">EUR_GBP</Option>
                  <Option value="GBP_AUD">GBP_AUD</Option>
                  <Option value="EUR_JPY">EUR_JPY</Option>
                  <Option value="AUD_USD">AUD_USD</Option>
                  <Option value="GBP_CHF">GBP_CHF</Option>
                  <Option value="GBP_NZD">GBP_NZD</Option>
                  <Option value="GBP_USD">GBP_USD</Option>
                  <Option value="USD_CAD">USD_CAD</Option>
                  <Option value="USD_JPY">USD_JPY</Option>
                  <Option value="EUR_CHF">EUR_CHF</Option>
                  <Option value="AUD_JPY">AUD_JPY</Option>
                  <Option value="EUR_AUD">EUR_AUD</Option>
                  <Option value="EUR_NZD">EUR_NZD</Option>
                  <Option value="CAD_JPY">CAD_JPY</Option>
                </Select>
              </Form.Item>
              <Form.Item label="Dataset" name="dataset">
                <Select style={{ width: "80px" }}>
                  <Option value="train">train</Option>
                  <Option value="test">test</Option>
                  <Option value="valid">valid</Option>
                </Select>
              </Form.Item>
              <Form.Item label="Model" name="model">
                <Select style={{ width: "150px" }}>
                  <Option value="CNN_NEW_TDC">CNN_NEW_TDC</Option>
                </Select>
              </Form.Item>
              <Form.Item label="Time Frames" name="timeframe">
                <Select style={{ width: "100px" }}>
                  <Option value="M15">M15</Option>
                  <Option value="M30">M30</Option>
                  <Option value="M60">M60</Option>
                  <Option value="M240">M240</Option>
                  <Option value="M1440">M1440</Option>
                </Select>
              </Form.Item>
              <Form.Item label="Date" name="date">
                <RangePicker showTime style={{ width: "300px" }} />
              </Form.Item>
              <Form.Item>
                <Button type="primary" htmlType="submit">
                  Submit
                </Button>
              </Form.Item>
            </Form>
          </div>
          <Spin tip="Loading..." spinning={loading}>
            <div className="white-box">
              <h2>Chart</h2>
              {isChart === true && (
                <div>
                  <AnyChart
                    width={1500}
                    height={600}
                    instance={chart}
                    margin={0}
                    padding={0}
                    title="stock"
                  />
                  show
                </div>
              )}
            </div>
          </Spin>
        </div>
      </main>
    </div>
  );
}
